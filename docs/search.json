[
  {
    "objectID": "Analysis1.html",
    "href": "Analysis1.html",
    "title": "Metagenome Analysis",
    "section": "",
    "text": "Prior to this analysis, the variants have been filtered using Mutect2’s FilterMutectCalls as well as separately for SNPs and INDELs using the following hard filtering factors: SOR, FS, MQ, MQRankSum, ReadPosRankSum, SNP/INDEL clustering (3/35) and SNP/INDEL proximity.\n\n\nCode\nlibrary(tidyverse)\nlibrary(Polychrome)\nlibrary(withr)\nlibrary(fs)\nlibrary(compositions)\nlibrary(vegan)\nlibrary(qvalue)\n\nsource(\"data/input/utils_parallelism.R\")"
  },
  {
    "objectID": "Analysis1.html#effect-in-data-minimum-twice-hambi",
    "href": "Analysis1.html#effect-in-data-minimum-twice-hambi",
    "title": "Metagenome Analysis",
    "section": "1.1) EFFECT in data minimum twice / HAMBI",
    "text": "1.1) EFFECT in data minimum twice / HAMBI\n\n\nCode\nmutation_counts %&gt;% filter(n &gt; 2) %&gt;%\n  ggplot(aes(x = HAMBI, y = n, fill = EFFECT)) +\n  geom_bar(stat = \"identity\") +\n  facet_grid(measure_env ~ home_env) +\n  scale_fill_manual(values = c(\"orange\",\n                               \"skyblue\",\n                               \"wheat\",\n                               \"pink\",\n                               \"yellow\",\n                               \"black\",\n                               \"purple\",\n                               \"gray\",\n                               \"red\"))+\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\n\n\n\n\nCode\n                               # \"purple\",\n                               # \"gold\",\n                               # \"darkgreen\""
  },
  {
    "objectID": "Analysis1.html#no-intergenic-mutations",
    "href": "Analysis1.html#no-intergenic-mutations",
    "title": "Metagenome Analysis",
    "section": "1.2) No intergenic mutations",
    "text": "1.2) No intergenic mutations\n\n\nCode\nmutation_counts %&gt;% filter(EFFECT != \"intergenic_region\") %&gt;%\n  ggplot(aes(x = HAMBI, y = n, fill = EFFECT)) +\n  geom_bar(stat = \"identity\") +\n  facet_grid(measure_env ~ home_env) +\n  scale_fill_manual(values = c(\"darkgreen\",\n                               \"green\",\n                               \"orange\",\n                               \"skyblue\",\n                               \"wheat\",\n                               \"pink\",\n                               \"yellow\",\n                               \"black\",\n                               \"purple\",\n                               \"darkgray\",\n                               \"red\",\n                               \"gold\",\n                               \"hotpink\",\n                               \"blue\"))+\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\n\n\n\n\nCode\n                               # \"purple\",\n                               # \"gold\",\n                               # \"darkgreen\""
  },
  {
    "objectID": "Analysis1.html#cap-plot-for-the-whole-data-incl.-tetrahymena-samples",
    "href": "Analysis1.html#cap-plot-for-the-whole-data-incl.-tetrahymena-samples",
    "title": "Metagenome Analysis",
    "section": "2.1) CAP plot for the whole data (incl. tetrahymena samples)",
    "text": "2.1) CAP plot for the whole data (incl. tetrahymena samples)\nFirst plot split by Home, the second one split by Measure. t0 refers to the timepoint 0 (start of the experiment). Letters in the dots indicate the replicate.\n\n\nCode\nggplot() +\n  geom_point(data=sites_all, aes(x=CAP1, y=CAP2, color=measure_env), alpha = 1.5, size = 4) +\n  labs(x = paste0(\"CAP1 (\", round(summary(vegan::eigenvals(cap_results_all))[2,1] *100, 2)\n, \"%)\"),\n       y = paste0(\"CAP2 (\", round(summary(vegan::eigenvals(cap_results_all))[2,2] *100, 2)\n, \"%)\")) +\n  geom_text(data = sites_all, aes(x = CAP1, y = CAP2, label = replicate)) +\n  facet_wrap(home_env ~ .)\n\n\n\n\n\nCode\nggplot() +\n  geom_point(data=sites_all, aes(x=CAP1, y=CAP2, color=home_env), alpha = 1.5, size = 4) +\n  labs(x = paste0(\"CAP1 (\", round(summary(vegan::eigenvals(cap_results_all))[2,1] *100, 2)\n, \"%)\"),\n       y = paste0(\"CAP2 (\", round(summary(vegan::eigenvals(cap_results_all))[2,2] *100, 2)\n, \"%)\")) +\n  geom_text(data = sites_all, aes(x = CAP1, y = CAP2, label = replicate)) +\n  facet_wrap(measure_env ~ .)\n\n\n\n\n\nCode\nanova.cca(cap_results_all, by = \"terms\")"
  },
  {
    "objectID": "Analysis1.html#cap-plots-for-the-no-tetrahymena-data",
    "href": "Analysis1.html#cap-plots-for-the-no-tetrahymena-data",
    "title": "Metagenome Analysis",
    "section": "2.2) CAP plots for the no-tetrahymena data",
    "text": "2.2) CAP plots for the no-tetrahymena data\nFirst plot split by Home, second one split by Measure. t0 refers to the timepoint 0 (start of the experiment). Letters in the dots indicate the replicate.\n\n\nCode\nggplot() +\n  geom_point(data=sites, aes(x=CAP1, y=CAP2, color=measure_env), alpha = 1.5, size = 4) +\n  labs(x = paste0(\"CAP1 (\", round(summary(vegan::eigenvals(cap_results))[2,1] *100, 2)\n, \"%)\"),\n       y = paste0(\"CAP2 (\", round(summary(vegan::eigenvals(cap_results))[2,2] *100, 2)\n, \"%)\")) +\n  geom_text(data = sites, aes(x = CAP1, y = CAP2, label = replicate)) +\n  facet_wrap(home_env ~ .)\n\n\n\n\n\nCode\nggplot() +\n  geom_point(data=sites, aes(x=CAP1, y=CAP2, color=home_env), alpha = 1.5, size = 4) +\n  labs(x = paste0(\"CAP1 (\", round(summary(vegan::eigenvals(cap_results))[2,1] *100, 2)\n, \"%)\"),\n       y = paste0(\"CAP2 (\", round(summary(vegan::eigenvals(cap_results))[2,2] *100, 2)\n, \"%)\")) +\n  geom_text(data = sites, aes(x = CAP1, y = CAP2, label = replicate)) +\n  facet_wrap(measure_env ~ .)\n\n\n\n\n\nCode\nanova.cca(cap_results, by = \"terms\")"
  },
  {
    "objectID": "Analysis1.html#cap-plots-for-the-non-synonymous-variants",
    "href": "Analysis1.html#cap-plots-for-the-non-synonymous-variants",
    "title": "Metagenome Analysis",
    "section": "2.3) CAP plots for the non-synonymous variants",
    "text": "2.3) CAP plots for the non-synonymous variants\nFirst plot split by Home, second one split by Measure. t0 refers to the timepoint 0 (start of the experiment). Letters in the dots indicate the replicate.\n\n\nCode\nggplot() +\n  geom_point(data=sites_nonsyn, aes(x=CAP1, y=CAP2, color=measure_env), alpha = 1.5, size = 4) +\n  labs(x = paste0(\"CAP1 (\", round(summary(vegan::eigenvals(cap_results_nonsyn))[2,1] *100, 2)\n, \"%)\"),\n       y = paste0(\"CAP2 (\", round(summary(vegan::eigenvals(cap_results_nonsyn))[2,2] *100, 2)\n, \"%)\")) +\n  geom_text(data = sites_nonsyn, aes(x = CAP1, y = CAP2, label = replicate)) +\n  facet_wrap(home_env ~ .)\n\n\n\n\n\nCode\nggplot() +\n  geom_point(data=sites_nonsyn, aes(x=CAP1, y=CAP2, color=home_env), alpha = 1.5, size = 4) +\n  labs(x = paste0(\"CAP1 (\", round(summary(vegan::eigenvals(cap_results_nonsyn))[2,1] *100, 2)\n, \"%)\"),\n       y = paste0(\"CAP2 (\", round(summary(vegan::eigenvals(cap_results_nonsyn))[2,2] *100, 2)\n, \"%)\")) +\n  geom_text(data = sites_nonsyn, aes(x = CAP1, y = CAP2, label = replicate)) +\n  facet_wrap(measure_env ~ .)\n\n\n\n\n\nCode\nanova.cca(cap_results_nonsyn, by = \"terms\")"
  },
  {
    "objectID": "Analysis1.html#distances-between-the-timepoints-t3-and-t0",
    "href": "Analysis1.html#distances-between-the-timepoints-t3-and-t0",
    "title": "Metagenome Analysis",
    "section": "2.4) Distances between the timepoints t3 and t0",
    "text": "2.4) Distances between the timepoints t3 and t0\nDistance between the t3 and t0 points in the CAP plot for each Home-Measure combination where two timepoints existed.\n\n\nCode\ntest_t0 &lt;- sites %&gt;% select(-Sample) %&gt;%\n  filter(Timepoint == \"t0\")\n\ntest_t3 &lt;- sites %&gt;% select(-Sample) %&gt;%\n  filter(Timepoint == \"t3\" & Home != \"Ancestor\")\n\ntest &lt;- right_join(test_t0, test_t3,\n          by = join_by(Home, Replicate),\n          suffix = c(\"_t0\", \"_t3\")) %&gt;%\n  select(-c(\"Measure_t0\", \"Timepoint_t0\", \"Timepoint_t3\")) %&gt;%\n  rename(\"Measure\" = \"Measure_t3\") %&gt;%\n  mutate(CAP1_dist = (CAP1_t0 - CAP1_t3)^2,\n         CAP2_dist = (CAP2_t0 - CAP2_t3)^2) %&gt;%\n  mutate(dist = sqrt(CAP1_dist + CAP2_dist)) %&gt;%\n  mutate(Home_Measure = paste(Home, Measure, sep = \"_\"))\n\ntest %&gt;%\n  ggplot(aes(x = Home_Measure, y = dist)) +\n  geom_boxplot() +\n  labs(y = \"Distance between t3 and t0\")"
  },
  {
    "objectID": "Analysis1.html#tsne-plot-with-non-synonymous-variants-data",
    "href": "Analysis1.html#tsne-plot-with-non-synonymous-variants-data",
    "title": "Metagenome Analysis",
    "section": "3.1) tSNE plot with non-synonymous variants data",
    "text": "3.1) tSNE plot with non-synonymous variants data\nFirst plot split by Home, second one split by Measure. t0 refers to the timepoint 0 (start of the experiment). Letters in the dots indicate the replicate.\n\n\nCode\nggplot() +\n  geom_point(data=tSNE_for_plot, aes(x=tSNE1, y=tSNE2, color=measure_env), alpha = 1.5, size = 4) +\n  geom_text(data = tSNE_for_plot, aes(x=tSNE1, y=tSNE2, label = replicate)) +\n  facet_wrap(home_env ~ .)\n\n\n\n\n\nCode\nggplot() +\n  geom_point(data=tSNE_for_plot, aes(x=tSNE1, y=tSNE2, color=home_env), alpha = 1.5, size = 4) +\n  geom_text(data = tSNE_for_plot, aes(x=tSNE1, y=tSNE2, label = replicate)) +\n  facet_wrap(measure_env ~ .)"
  },
  {
    "objectID": "Analysis3.html",
    "href": "Analysis3.html",
    "title": "Metagenome Analysis",
    "section": "",
    "text": "Libraries and functions\nPrior to this analysis, the variants have been filtered using Mutect2’s FilterMutectCalls as well as separately for SNPs and INDELs using the following hard filtering factors: SOR, FS, MQ, MQRankSum, ReadPosRankSum, SNP/INDEL clustering (3/35) and SNP/INDEL proximity.\n\n\nCode\nlibrary(tidyverse)\nlibrary(Polychrome)\nlibrary(withr)\nlibrary(fs)\nlibrary(compositions)\nlibrary(vegan)\nlibrary(qvalue)\n\nsource(\"data/input/utils_parallelism.R\")\n\n\n\n\n7) Variants that existed in YSK\nPlot of variants that existed in t0 (YSK) samples in at least two replicates. Plot split by experimental condition, NA panel has the variants that were seen in YSK but not in timepoint 3 (t3). Color indicates the difference in variant allele frequency between t3 and t0 (t3 minus t0). Fixed variants (VAF &gt;= 0.9) marked with the text “YSK” / “t3” / “Both”.\n\n\nCode\nvariants_strep &lt;- read_rds(\"data/input/variants_strep.rds\")\n\ngene_name_key &lt;- read_tsv(\"data/input/gene_names_and_products_key.tsv\") %&gt;%\n  select(ID, gene_name)\n\nvariants_strep &lt;- variants_strep %&gt;%\n  mutate(GENE1 = ifelse(str_detect(GENE, \"-\"),\n                        str_split_i(GENE, \"-\", 1),\n                        NA),\n         GENE2 = ifelse(str_detect(GENE, \"-\"),\n                        str_split_i(GENE, \"-\", 2),\n                        NA)) %&gt;%\n  left_join(gene_name_key, by = join_by(GENE1 == ID)) %&gt;%\n  rename(gene_name1 = gene_name) %&gt;%\n  left_join(gene_name_key, by = join_by(GENE2 == ID)) %&gt;%\n  rename(gene_name2 = gene_name) %&gt;%\n  mutate(gene_name1 = ifelse(is.na(gene_name1),\n                             \"?\",\n                             gene_name1),\n         gene_name2 = ifelse(is.na(gene_name2),\n                             \"?\",\n                             gene_name2)) %&gt;%\n  left_join(gene_name_key, by = join_by(GENE == ID)) %&gt;%\n  mutate(gene_name = ifelse(str_detect(GENE, \"-\"),\n                            paste(gene_name1, gene_name2, sep = \" - \"),\n                            gene_name),\n         gene_name = ifelse(is.na(gene_name),\n                            \"?\",\n                            gene_name))\n\n# collect which replicates in t3\nt3_samples &lt;- variants_strep %&gt;% filter(Timepoint == \"t3\") %&gt;%\n  mutate(id = paste(Home, Replicate, sep = \"_\")) %&gt;%\n  pull(id) %&gt;% unique()\n\nt3_variants &lt;- variants_strep %&gt;% filter(Timepoint == \"t3\") %&gt;%\n  select(HAMBI, CHROM, POS, REF, ALT, GENE, EFFECT, Home, Measure, Replicate, VAF, gene_name) %&gt;%\n  rename(\"VAF_t3\" = VAF)\n\nYSK_variants &lt;- variants_strep %&gt;%\n  filter(Timepoint == \"t0\") %&gt;%\n  select(HAMBI, CHROM, POS, REF, ALT, GENE, gene_name, EFFECT, Home, Replicate, VAF) %&gt;%\n  rename(\"VAF_t0\" = VAF) %&gt;%\n  filter(paste(Home, Replicate, sep = \"_\") %in% t3_samples) %&gt;%\n  group_by(CHROM, POS, ALT, Home) %&gt;%\n  mutate(mi = n_distinct(Replicate)) %&gt;% ungroup() %&gt;%\n  left_join(t3_variants,\n            by = join_by(HAMBI, CHROM, POS, REF, ALT, GENE, EFFECT, Home, Replicate, gene_name)) %&gt;%\n  mutate(VAF_t3 = ifelse(is.na(VAF_t3), 0, VAF_t3),\n         VAF_diff = VAF_t3 - VAF_t0)\n\nYSK_variants %&gt;% filter(mi &gt;= 2) %&gt;%\n  mutate(ALT = ifelse(ALT == \"CGCCGGCAAGCCAGCTCCCGCAGGTACTGCACAAGCCTTGAAGGCAGTGATGTCCCTGTGGGAGCTGGCTTGCCGGCGATAGG\",\n                      \"long_ins_1\",\n                      ALT),\n         GENE_ALT = paste0(GENE,\"_\", POS, \"_\", ALT, \" ( \", gene_name, \" ) \"),\n         Home_Replicate = paste(str_sub(Home, 1, 5), Replicate, sep = \"_\"),\n         Fixed = ifelse(VAF_t0 &gt;= 0.9 & VAF_t3 &gt;= 0.9,\n                        \"Both\",\n                        ifelse(VAF_t0 &gt;= 0.9 & VAF_t3 &lt; 0.9,\n                               \"YSK\",\n                               ifelse(VAF_t0 &lt; 0.9 & VAF_t3 &gt;= 0.9,\n                                      \"t3\",\n                                      \"\")))) %&gt;%\n  ggplot(aes(x = Home_Replicate, y = GENE_ALT, fill = VAF_diff)) +\n  geom_tile() +\n  geom_text(aes(label = Fixed), color = \"white\") +\n  #scale_fill_viridis_c(option = \"D\", direction = 1) +\n  scale_fill_gradient2(low = \"darkblue\",\n                       mid = \"grey\",\n                       high = \"green\") +\n  facet_grid(Measure ~ ., scales = \"free\", space = \"free\")\n\n\n\n\n\n\n\n8) De novo variants found in all three replicates\n\n\nCode\nt3_variants_mi3 &lt;- t3_variants %&gt;%\n  anti_join(YSK_variants,\n            by = join_by(HAMBI, CHROM, POS, REF, ALT, GENE, Home, Replicate)) %&gt;%\n  group_by(CHROM, POS, ALT, Home, Measure) %&gt;%\n  mutate(mi = n_distinct(Replicate)) %&gt;% ungroup() %&gt;%\n  filter(mi &gt;= 3)\n  \n\nt3_variants_mi3 %&gt;%\n  mutate(GENE_ALT = paste0(GENE,\"_\", POS, \"_\", ALT, \" ( \", gene_name, \" ) \"),\n         Home_Replicate = paste(str_sub(Home, 1, 5), Replicate, sep = \"_\"),\n         Fixed = ifelse(VAF_t3 &gt;= 0.9,\n                        \"Fixed\",\n                        \"\")) %&gt;%\n  ggplot(aes(x = Home_Replicate, y = GENE_ALT, fill = VAF_t3)) +\n  geom_tile() +\n  geom_text(aes(label = Fixed), color = \"white\") +\n  scale_fill_viridis_c(option = \"D\", direction = 1) +\n  # scale_fill_gradient2(low = \"darkblue\",\n  #                      mid = \"grey\",\n  #                      high = \"green\") +\n  facet_grid(Measure ~ ., scales = \"free\", space = \"free\")\n\n\n\n\n\n\n\n9) De novo variants found in two replicates\n\n\nCode\nt3_variants_mi2 &lt;- t3_variants %&gt;%\n  anti_join(YSK_variants,\n            by = join_by(HAMBI, CHROM, POS, REF, ALT, GENE, Home, Replicate)) %&gt;%\n  group_by(CHROM, POS, ALT, Home, Measure) %&gt;%\n  mutate(mi = n_distinct(Replicate)) %&gt;% ungroup() %&gt;%\n  filter(mi == 2)\n\nt3_variants_mi2 %&gt;%\n  mutate(ALT = ifelse(ALT == \"CGCCGGCAAGCCAGCTCCCGCAGGTACTGCACAAGCCTTGAAGGCAGTGATGTCCCTGTGGGAGCTGGCTTGCCGGCGATAGG\",\n                      \"long_ins_1\",\n                      ALT),\n         GENE_ALT = paste0(GENE,\"_\", POS, \"_\", ALT, \" ( \", gene_name, \" ) \"),\n         Home_Replicate = paste(str_sub(Home, 1, 5), Replicate, sep = \"_\"),\n         Fixed = ifelse(VAF_t3 &gt;= 0.9,\n                        \"Fixed\",\n                        \"\")) %&gt;%\n  ggplot(aes(x = Home_Replicate, y = GENE_ALT, fill = VAF_t3)) +\n  geom_tile() +\n  geom_text(aes(label = Fixed), color = \"white\") +\n  scale_fill_viridis_c(option = \"D\", direction = 1) +\n  # scale_fill_gradient2(low = \"darkblue\",\n  #                      mid = \"grey\",\n  #                      high = \"green\") +\n  facet_grid(Measure ~ ., scales = \"free\", space = \"free\")"
  },
  {
    "objectID": "Analysis2.html",
    "href": "Analysis2.html",
    "title": "Metagenome Analysis",
    "section": "",
    "text": "Prior to this analysis, the variants have been filtered using Mutect2’s FilterMutectCalls as well as separately for SNPs and INDELs using the following hard filtering factors: SOR, FS, MQ, MQRankSum, ReadPosRankSum, SNP/INDEL clustering (3/35) and SNP/INDEL proximity.\n\n\nCode\nlibrary(tidyverse)\nlibrary(Polychrome)\nlibrary(withr)\nlibrary(fs)\nlibrary(compositions)\nlibrary(vegan)\nlibrary(qvalue)\n\nsource(\"data/input/utils_parallelism.R\")"
  },
  {
    "objectID": "Analysis2.html#table",
    "href": "Analysis2.html#table",
    "title": "Metagenome Analysis",
    "section": "4.1) Table",
    "text": "4.1) Table\nmi: number of replicates.\n\n\nCode\nknitr::kable(HAMBI_mutations_filt)\n\n\n\n\n\nHAMBI\nmi\nn\ntot\n\n\n\n\nHAMBI_0006\n3\n63\n114\n\n\nHAMBI_1842\n3\n9\n114\n\n\nHAMBI_1972\n3\n30\n114\n\n\nHAMBI_1977\n3\n3\n114\n\n\nHAMBI_2659\n3\n9\n114\n\n\nHAMBI_0006\n2\n22\n92\n\n\nHAMBI_0403\n2\n2\n92\n\n\nHAMBI_1842\n2\n8\n92\n\n\nHAMBI_1972\n2\n10\n92\n\n\nHAMBI_1977\n2\n28\n92\n\n\nHAMBI_2659\n2\n22\n92\n\n\nHAMBI_0006\n1\n36\n309\n\n\nHAMBI_0403\n1\n10\n309\n\n\nHAMBI_1287\n1\n5\n309\n\n\nHAMBI_1842\n1\n38\n309\n\n\nHAMBI_1972\n1\n31\n309\n\n\nHAMBI_1977\n1\n77\n309\n\n\nHAMBI_2164\n1\n1\n309\n\n\nHAMBI_2443\n1\n11\n309\n\n\nHAMBI_2659\n1\n100\n309"
  },
  {
    "objectID": "Analysis2.html#plot",
    "href": "Analysis2.html#plot",
    "title": "Metagenome Analysis",
    "section": "4.2) Plot",
    "text": "4.2) Plot\nDistribution of nucleotide multiplicity (the number of replicates with the same genomic mutation) for HAMBI x Home x treatment combinations. The observed data in blue, the null expectation in red.\n\n\nCode\nnuc_survival &lt;- variants_filt %&gt;%\n  dplyr::select(HAMBI, Home, Measure, POS, REF, ALT, Replicate) %&gt;% \n  # multiplicity = number of replicate populations each unique mutation is\n  # observed in\n  summarize(m = n_distinct(Replicate), .by = c(HAMBI, Home, Measure, POS, REF, ALT)) %&gt;%\n  # now calculate the total number of mutations across all replicates so we need\n  # to ungroup by mutation position/alt allele but because we still want to\n  # determine this value by treatment category we keep the treatment category\n  # grouping. However, this should be changed if you want to for example average\n  # over all the treatment conditions on a species basis\n  group_by(HAMBI, Home, Measure) %&gt;%\n  count(m, name = \"m_count\") %&gt;%\n  mutate(n = m * m_count,\n         Ntot = sum(n),\n         perc = n / Ntot * 100) %&gt;%\n  left_join(chrom_lengths, by = join_by(HAMBI)) %&gt;%\n  arrange(cur_group_id(), desc(m)) %&gt;%\n  #  dpois() tells the probability mass at a given number of counts. Here we\n  #  want to get the probability of observing n mutations with multiplicity\n  #  = mi (i.e. the counts of mi in the observed data). We assume that\n  #  mutations independently occur on the genome of size Ltot at a rate of\n  #  lambda = Ntot/Ltot and that generally the events are rare. Thus this\n  #  situation can be modeled by the Poisson distribution. We can get the\n  #  binned number of mutations per level of multiplicity m by multiplying\n  #  the probability by the length of the genome and the binned mutations\n  #  divided by the total number of mutations.\n  mutate(m_count_expected = cumsum((m_count / Ntot) *\n                                     sum_bases *\n                                     dpois(m, lambda = Ntot / sum_bases))) %&gt;%\n  #dplyr::select(-num_contigs) %&gt;%\n  relocate(m, n, Ntot, perc, m_count, m_count_expected) %&gt;%\n  ungroup()\n\n# setup for plotting\nnuc_survival_plot &lt;- nuc_survival %&gt;% \n  group_by(HAMBI, Home, Measure) %&gt;% \n  # when there is only one multiplicity observed for a mutation filter such\n  # that the multiplicty of that mutation must be greater than one.\n  # Otherwise include all remaining mutations (m &gt; 0)\n  filter(case_when(n() == 1 ~ m &gt; 1,\n                   TRUE ~ m &gt; 0)) %&gt;% \n  pivot_longer(cols = c(\"m_count\", \"m_count_expected\")) %&gt;% \n  mutate(label = paste(HAMBI, \"Home:\", Home, \"\\nMeasure:\", Measure)) %&gt;% \n  # and make final plot\n  plot_nuc_survival(., 5000, c(1, 10, 100, 1000, 10000), 4)\n\nnuc_survival_plot"
  },
  {
    "objectID": "Analysis2.html#barplot-of-the-mutation-distributions",
    "href": "Analysis2.html#barplot-of-the-mutation-distributions",
    "title": "Metagenome Analysis",
    "section": "4.3) Barplot of the mutation distributions",
    "text": "4.3) Barplot of the mutation distributions\nSplit by Home and Measure.\n\n\nCode\nHAMBI_mutations_filt2 %&gt;%\n  ggplot(aes(x = mi, y = n, fill = HAMBI)) +\n  geom_bar(stat = \"identity\") +\n  facet_grid(Measure ~ Home)"
  },
  {
    "objectID": "Analysis2.html#table-1",
    "href": "Analysis2.html#table-1",
    "title": "Metagenome Analysis",
    "section": "4.4) Table",
    "text": "4.4) Table\nDistributions summarised.\n\n\nCode\nnuc_survival_table &lt;- nuc_survival %&gt;% \n  mutate(Ntot_f = sum(n)) %&gt;%\n  reframe(perc = sum(n)/Ntot_f*100, .by = \"m\") %&gt;% \n  distinct() %&gt;% \n  mutate(cum_perc = cumsum(perc))\n\nknitr::kable(nuc_survival_table)\n\n\n\n\n\nm\nperc\ncum_perc\n\n\n\n\n3\n22.13592\n22.13592\n\n\n2\n17.86408\n40.00000\n\n\n1\n60.00000\n100.00000"
  },
  {
    "objectID": "Analysis2.html#survival-curve-plot",
    "href": "Analysis2.html#survival-curve-plot",
    "title": "Metagenome Analysis",
    "section": "5.1) Survival curve plot",
    "text": "5.1) Survival curve plot\nBlue line: observed number of genes, Grey line: expected number of genes, Red line: genome-wide significance threshold.\n\n\nCode\nresult_sp_treat$output_df2plot %&gt;% \n  filter(!is.na(xend)) %&gt;% \n  mutate(label = paste(strainID, \"Home:\", Home, \"\\nMeasure:\", Measure)) %&gt;% \n  ggplot() +\n    geom_segment(\n      aes(\n        x = x,\n        y = y,\n        xend = xend,\n        yend = yend\n      ),\n      linetype = \"dashed\",\n      linewidth = 0.25, color = \"red\"\n    ) +\n    geom_step( aes(x = obs_p, y = value, color = name)) +\n    facet_wrap(~ label, ncol = 4) +\n    labs(x = \"log10P\", y = \"Number of genes\") +\n    scale_color_manual(values = c(\"blue\", \"grey50\")) +\n    scale_y_log10(\n      breaks = c(1, 10, 100),\n      labels = scales::trans_format(\"log10\", scales::math_format(10 ^.x))\n    ) +\n    annotation_logticks(sides = \"l\", color = \"grey40\") +\n    coord_cartesian(ylim = c(1, 200)) +\n    theme_bw() +\n    theme(\n      strip.background = element_blank(),\n      panel.grid = element_blank(),\n      legend.position = \"bottom\"\n    )"
  },
  {
    "objectID": "Analysis2.html#significant-g-scores",
    "href": "Analysis2.html#significant-g-scores",
    "title": "Metagenome Analysis",
    "section": "5.2) Significant G scores",
    "text": "5.2) Significant G scores\n\n\nCode\nt &lt;- result_sp_treat$output_gscore %&gt;% \n  filter(pvalue &lt;= 0.05)\n\nknitr::kable(t)\n\n\n\n\n\n\n\n\n\n\n\n\n\ngroupid\nobserved_g_score\npvalue\nstrainID\nHome\nMeasure\n\n\n\n\n1\n6.658866\n0.0000\nHAMBI_0006\nAncestor\nControl\n\n\n2\n6.295729\n0.0001\nHAMBI_0006\nControl\nControl\n\n\n3\n6.918354\n0.0000\nHAMBI_0006\nStreptomycin\nControl\n\n\n5\n7.446201\n0.0000\nHAMBI_0403\nAncestor\nStreptomycin\n\n\n6\n8.409097\n0.0469\nHAMBI_0403\nControl\nStreptomycin\n\n\n8\n7.683207\n0.0465\nHAMBI_1287\nStreptomycin\nStreptomycin\n\n\n9\n8.876788\n0.0000\nHAMBI_1842\nAncestor\nControl\n\n\n10\n7.518061\n0.0000\nHAMBI_1842\nAncestor\nStreptomycin\n\n\n11\n7.698125\n0.0002\nHAMBI_1842\nControl\nControl\n\n\n12\n6.429209\n0.0000\nHAMBI_1842\nControl\nStreptomycin\n\n\n15\n7.025552\n0.0000\nHAMBI_1972\nAncestor\nControl\n\n\n16\n6.509704\n0.0000\nHAMBI_1972\nControl\nControl\n\n\n18\n6.327163\n0.0000\nHAMBI_1972\nStreptomycin\nControl\n\n\n19\n6.758282\n0.0004\nHAMBI_1977\nAncestor\nStreptomycin\n\n\n20\n8.836713\n0.0112\nHAMBI_1977\nControl\nControl\n\n\n21\n7.926151\n0.0000\nHAMBI_1977\nControl\nStreptomycin\n\n\n22\n8.729127\n0.0001\nHAMBI_1977\nStreptomycin\nControl\n\n\n23\n7.391594\n0.0000\nHAMBI_1977\nStreptomycin\nStreptomycin\n\n\n25\n7.623093\n0.0147\nHAMBI_2443\nAncestor\nControl\n\n\n26\n9.438673\n0.0452\nHAMBI_2443\nAncestor\nStreptomycin\n\n\n31\n6.208508\n0.0000\nHAMBI_2659\nStreptomycin\nControl\n\n\n32\n6.168692\n0.0000\nHAMBI_2659\nStreptomycin\nStreptomycin"
  },
  {
    "objectID": "Analysis2.html#inspecting-individual-genes",
    "href": "Analysis2.html#inspecting-individual-genes",
    "title": "Metagenome Analysis",
    "section": "5.3) Inspecting individual genes",
    "text": "5.3) Inspecting individual genes\nFiltering out the genes with a too large a number of consecutive mutations and are unlikely to be real mutations.\n\n\nCode\nhigh_density_genes &lt;- mgvars_filt_mb_ns %&gt;% \n  group_by(HAMBI, GENE, replicate, Home, Measure) %&gt;% \n  mutate(mutwindox = POS - lag(POS),\n         mut_num = n(),\n         mut_dens = n()/(max(POS) -  min(POS))) %&gt;% \n  ungroup() %&gt;% \n  filter(mut_dens != Inf) %&gt;% \n  filter(mut_dens &gt; 0.15) %&gt;% \n  distinct(GENE) %&gt;% \n  pull()\n\noutput_gene_table_filt &lt;- result_sp_treat$output_gene_table %&gt;% \n  # only genes exceeding the critical pstar value from the survival curves above\n  filter(neg_log10P &gt;= pstar) %&gt;% \n  # only include genes with at least 3 hits in the same gene or found in more than one replicate.\n  filter(observed_hits_n_i &gt;= 3 | n_replicate &gt; 1) %&gt;%\n  # filters out the problematic genes above unless the number of replicates detected is 2 or more\n  filter(case_when(n_replicate &lt; 2 ~ !(locus_tag %in% high_density_genes), \n                   TRUE ~ n_replicate &gt; 1)) %&gt;% \n  left_join(degentab, by = join_by(locus_tag, strainID)) %&gt;%\n  arrange(locus_tag)"
  },
  {
    "objectID": "Analysis2.html#jaccard-index-for-convergence-between-treatments",
    "href": "Analysis2.html#jaccard-index-for-convergence-between-treatments",
    "title": "Metagenome Analysis",
    "section": "6.1) Jaccard Index for convergence between treatments",
    "text": "6.1) Jaccard Index for convergence between treatments\nThis section simulates the process of randomly sampling significant gene set pairs from every HAMBI x home/measurement combination pairs. The probability of sampling a gene is proportional to its length. Jaccard index is then calculated for each null simulation. Empirical P value is calculated for the number of null simulation results exceeding the observed Jaccard index to find out if there was convergence or divergence.\n\n\nCode\n# cvdv &lt;- list()\n# for(HAMBI in unique(output_gene_table_filt$strainID)){\n#   cat(paste(\"\\n\", HAMBI, \" \"))\n#   \n#   cvdv[[HAMBI]] &lt;- try(resample_jaccard(100000, prep4jaccard_resample(output_gene_table_filt, degentab, HAMBI, Home, Measure)))\n#   \n# }\n# \n# write_rds(cvdv, \"data/results/jaccard_cvdv_all.rds\")\n\ncvdv &lt;- read_rds(\"data/results/jaccard_cvdv_all.rds\")\n\nfor(i in length(cvdv):1){\n  if(!is_tibble(cvdv[[i]])){\n    cvdv[[i]] &lt;- NULL\n  }\n}\n\nx &lt;- bind_rows(cvdv, .id = \"HAMBI\") %&gt;%\n  arrange(HAMBI)\n\n\n\n6.1.1) Table\n\n\nCode\nknitr::kable(x)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHAMBI\ntreat_pair\np_values\ngroupid1\ngroupid2\ngroupname1\ngroupname2\n\n\n\n\nHAMBI_0006\n1\n0.00001\n1\n2\nHome: Ancestor, Measure: Control\nHome: Control, Measure: Control\n\n\nHAMBI_0006\n2\n0.00000\n1\n3\nHome: Ancestor, Measure: Control\nHome: Streptomycin, Measure: Control\n\n\nHAMBI_0006\n3\n0.00000\n2\n3\nHome: Control, Measure: Control\nHome: Streptomycin, Measure: Control\n\n\nHAMBI_1842\n1\n0.00087\n1\n2\nHome: Ancestor, Measure: Control\nHome: Ancestor, Measure: Streptomycin\n\n\nHAMBI_1842\n2\n0.00029\n1\n3\nHome: Ancestor, Measure: Control\nHome: Control, Measure: Control\n\n\nHAMBI_1842\n3\n0.00032\n1\n4\nHome: Ancestor, Measure: Control\nHome: Control, Measure: Streptomycin\n\n\nHAMBI_1842\n5\n0.00032\n2\n3\nHome: Ancestor, Measure: Streptomycin\nHome: Control, Measure: Control\n\n\nHAMBI_1842\n6\n0.00106\n2\n4\nHome: Ancestor, Measure: Streptomycin\nHome: Control, Measure: Streptomycin\n\n\nHAMBI_1842\n8\n0.00000\n3\n4\nHome: Control, Measure: Control\nHome: Control, Measure: Streptomycin\n\n\nHAMBI_1972\n1\n0.00000\n1\n2\nHome: Ancestor, Measure: Control\nHome: Control, Measure: Control\n\n\nHAMBI_1972\n2\n0.00000\n1\n3\nHome: Ancestor, Measure: Control\nHome: Streptomycin, Measure: Control\n\n\nHAMBI_1972\n3\n0.00000\n2\n3\nHome: Control, Measure: Control\nHome: Streptomycin, Measure: Control\n\n\nHAMBI_1977\n1\n0.00054\n1\n2\nHome: Ancestor, Measure: Streptomycin\nHome: Control, Measure: Streptomycin\n\n\nHAMBI_1977\n2\n0.00028\n1\n3\nHome: Ancestor, Measure: Streptomycin\nHome: Streptomycin, Measure: Control\n\n\nHAMBI_1977\n3\n0.00058\n1\n4\nHome: Ancestor, Measure: Streptomycin\nHome: Streptomycin, Measure: Streptomycin\n\n\nHAMBI_1977\n4\n0.00041\n2\n3\nHome: Control, Measure: Streptomycin\nHome: Streptomycin, Measure: Control\n\n\nHAMBI_1977\n5\n0.00000\n2\n4\nHome: Control, Measure: Streptomycin\nHome: Streptomycin, Measure: Streptomycin\n\n\nHAMBI_1977\n6\n0.00054\n3\n4\nHome: Streptomycin, Measure: Control\nHome: Streptomycin, Measure: Streptomycin\n\n\nHAMBI_2659\n1\n0.00000\n1\n2\nHome: Control, Measure: Control\nHome: Control, Measure: Streptomycin\n\n\nHAMBI_2659\n2\n0.00000\n1\n3\nHome: Control, Measure: Control\nHome: Streptomycin, Measure: Control\n\n\nHAMBI_2659\n3\n0.00000\n1\n4\nHome: Control, Measure: Control\nHome: Streptomycin, Measure: Streptomycin\n\n\nHAMBI_2659\n4\n0.00000\n2\n3\nHome: Control, Measure: Streptomycin\nHome: Streptomycin, Measure: Control\n\n\nHAMBI_2659\n5\n0.00000\n2\n4\nHome: Control, Measure: Streptomycin\nHome: Streptomycin, Measure: Streptomycin\n\n\nHAMBI_2659\n6\n0.00000\n3\n4\nHome: Streptomycin, Measure: Control\nHome: Streptomycin, Measure: Streptomycin"
  },
  {
    "objectID": "Analysis2.html#enrichment-of-individual-cog-categories",
    "href": "Analysis2.html#enrichment-of-individual-cog-categories",
    "title": "Metagenome Analysis",
    "section": "6.2) Enrichment of individual COG categories",
    "text": "6.2) Enrichment of individual COG categories\nSimulation based approach to see if different functions of the enriched genes are appearing more often than expected by chance.\n\n\nCode\ncog_description &lt;- tibble::tribble(\n  ~COG_category_single,                                                  ~COG_category_long,\n            \"J\",               \"J - Translation, ribosomal structure and biogenesis\",\n            \"A\",                               \"A - RNA processing and modification\",\n            \"K\",                                                 \"K – Transcription\",\n            \"L\",                         \"L - Replication, recombination and repair\",\n            \"B\",                              \"B - Chromatin structure and dynamics\",\n            \"D\",    \"D - Cell cycle control, cell division, chromosome partitioning\",\n            \"Y\",                                             \"Y - Nuclear structure\",\n            \"V\",                                            \"V - Defense mechanisms\",\n            \"T\",                                \"T - Signal transduction mechanisms\",\n            \"M\",                        \"M - Cell wall/membrane/envelope biogenesis\",\n            \"N\",                                                 \"N - Cell motility\",\n            \"Z\",                                                  \"Z – Cytoskeleton\",\n            \"W\",                                      \"W - Extracellular structures\",\n            \"U\", \"U - Intracellular trafficking, secretion, and vesicular transport\",\n            \"O\",  \"O - Posttranslational modification, protein turnover, chaperones\",\n            \"X\",                              \"X - Mobilome: prophages, transposons\",\n            \"C\",                              \"C - Energy production and conversion\",\n            \"G\",                         \"G - Carbohydrate transport and metabolism\",\n            \"E\",                           \"E - Amino acid transport and metabolism\",\n            \"F\",                           \"F - Nucleotide transport and metabolism\",\n            \"H\",                             \"H - Coenzyme transport and metabolism\",\n            \"I\",                                \"I - Lipid transport and metabolism\",\n            \"P\",                        \"P - Inorganic ion transport and metabolism\",\n            \"Q\",  \"Q - Secondary metabolites biosynthesis, transport and catabolism\",\n            \"R\",                              \"R - General function prediction only\",\n            \"S\",                                              \"S - Function unknown\"\n  )\n\n# read eggnog data\neggnog &lt;- read_tsv(\"data/input/HAMBI_all_eggnog_formatted.tsv.xz\")\n\noutput_gene_table_filt_cog &lt;- left_join(output_gene_table_filt, eggnog) %&gt;% \n  rename(prokka_annotation = product) %&gt;% \n  relocate(strainID, Home, Measure, COG_category_long, Preferred_name, Description, prokka_annotation)\n\neggnog_nslen &lt;- left_join(eggnog, degentab,\n                          by = join_by(strainID, locus_tag)) %&gt;% \n  dplyr::select(strainID, locus_tag, COG_category_single, ns_length) %&gt;% \n  filter(!is.na(COG_category_single)) %&gt;% \n  group_by(strainID) %&gt;% \n  mutate(p = ns_length/sum(ns_length), \n         cog_genes = n()) %&gt;% \n  ungroup()\n\n\n\n6.2.1) Jensen Shannon Divergence\nFor each species, n (the number of significant parallel genes observed from the data) genes are drawn with a probability proportional to gene length. Then the Jensen Shannon divergence (JSD) between the distribution of the COG categories drawn randomly and the background is compared to JSD between the background and the observed distribution of COG categories in significantly parallel genes. If the JSD in the observed comparison is larger than in the sampled comparison, some COG categories are enriched/depleted.\n\n\nCode\ngene_nest &lt;- output_gene_table_filt %&gt;%\n    summarize(nsiggenes = n(), .by = c(strainID, Home, Measure)) %&gt;%\n    left_join(eggnog_nslen,\n              by = join_by(strainID),\n              relationship = \"many-to-many\") %&gt;%\n    nest(data = -c(strainID, Home, Measure))\n\ngene_draw &lt;- function(){\n  gene_nest %&gt;%\n    mutate(locus_tag = map(\n      data,\n      \\(x) sample(\n        x = x$locus_tag,\n        size = unique(x$nsiggenes),\n        prob = x$p,\n        replace = FALSE\n      )\n    )) %&gt;%\n    dplyr::select(-data) %&gt;%\n    unnest(cols = locus_tag) \n}\n\n# take 10 000 random draws of the genes. Use a seed for reproducibility\n# withr::with_seed(12367,\n#                  genes_simulated &lt;- map(1:10000, ~gene_draw(), .progress=TRUE) %&gt;% \n#                    list_rbind(names_to = \"id\"))\n\n# save the output so we don't need to run again\n#write_rds(genes_simulated, \"data/genes_simulated_nomobile.rds\")\n\n# read data back\ngenes_simulated &lt;- read_rds(\"data/genes_simulated_nomobile.rds\")\n\n# map the locus_tags to COG categories for the simulated\n# gene draws\nCOGs_distribution_simulated &lt;- genes_simulated %&gt;%\n  left_join(eggnog_nslen, by = join_by(strainID, locus_tag)) %&gt;%\n  group_by(id, strainID, Home, Measure) %&gt;% \n  count(COG_category_single, name = \"nsim\") %&gt;% \n  ungroup()\n\n# get the discrete distribution of COGs in the significant parallel genes\nCOGs_distribution_observed &lt;- left_join(output_gene_table_filt, eggnog,\n                                        by = join_by(locus_tag, strainID)) %&gt;% \n  group_by(strainID, Home, Measure) %&gt;% \n  count(COG_category_single, name = \"nobs\") \n\n# get the discrete distribution of COGs across the whole genome of all species\n# this is the null case (i.e. the background that we would expect if there was no\n# enrichment)\nCOGs_distribution_nullexpectation &lt;- eggnog %&gt;% \n  group_by(strainID) %&gt;% \n  count(COG_category_single, name = \"nnull\") \n\n# function to calculate the Jensen Shannon divergene of a pair of\n# distributions\nJSD_pair &lt;- function(p, q){\n  m &lt;- 0.5 * (p + q)\n  JS &lt;-  0.5 * (sum(p * log(p/m)) + sum(q * log(q/m)))\n  return(JS)\n}\n\n# Calculate the Jensen Shannon divergence between the COG distribution observed in \n# enriched genes and the COG distribution in the genomic background\nJSD_observed &lt;- left_join(COGs_distribution_observed, COGs_distribution_nullexpectation,\n                          by = join_by(COG_category_single)) %&gt;% \n  group_by(Home, Measure) %&gt;% \n  mutate(p = nobs/sum(nobs), \n         q = nnull/sum(nnull)) %&gt;% \n  summarize(JSD = JSD_pair(p, q))\n\n# now calculate JSD between the simulated draws and the backgound distribution\nJSD_simulated &lt;- left_join(COGs_distribution_simulated, \n                           COGs_distribution_nullexpectation,\n                           by = join_by(strainID, COG_category_single)) %&gt;% \n  # drops from calculation categories that aren't in both the observed data\n  # and the resampled data. Need to do this because JSD can't handle zero values\n  drop_na() %&gt;% \n  group_by(id, strainID, Home, Measure) %&gt;% \n  mutate(p = nsim/sum(nsim), \n         q = nnull/sum(nnull)) %&gt;%\n  summarize(JSD = JSD_pair(p, q))\n\n# proportion of JSD measures between simulated and the background that are greater\n# than the JSD between the observed and the background\nglobal_p &lt;- left_join(JSD_simulated, JSD_observed, by = join_by(Home, Measure)) %&gt;% \n  mutate(ngt = JSD.x &gt;= JSD.y) %&gt;% \n  group_by(strainID, Home, Measure) %&gt;% \n  summarize(p = sum(ngt)/n())\n\n# test &lt;- left_join(JSD_simulated, JSD_observed, by = join_by(Home, Measure)) %&gt;% \n#   mutate(ngt = JSD.x &gt;= JSD.y)\n\n\n\n6.2.1.1) Table\nThe overall distribution of COG categories in the parallel genes for each genome in each home-measurement combination is significantly different than in the rest of the genome in majority of HAMBIs.\n\n\nCode\nknitr::kable(global_p)\n\n\n\n\n\nstrainID\nHome\nMeasure\np\n\n\n\n\nHAMBI_0006\nAncestor\nControl\n0.0276\n\n\nHAMBI_0006\nControl\nControl\n0.0046\n\n\nHAMBI_0006\nStreptomycin\nControl\n0.2635\n\n\nHAMBI_0403\nAncestor\nStreptomycin\n0.1618\n\n\nHAMBI_1287\nStreptomycin\nStreptomycin\n0.0000\n\n\nHAMBI_1842\nAncestor\nControl\n0.0000\n\n\nHAMBI_1842\nAncestor\nStreptomycin\n0.2524\n\n\nHAMBI_1842\nControl\nControl\n0.0000\n\n\nHAMBI_1842\nControl\nStreptomycin\n0.0000\n\n\nHAMBI_1842\nStreptomycin\nControl\n0.0000\n\n\nHAMBI_1972\nAncestor\nControl\n0.0165\n\n\nHAMBI_1972\nControl\nControl\n0.0035\n\n\nHAMBI_1972\nStreptomycin\nControl\n0.0838\n\n\nHAMBI_1977\nAncestor\nStreptomycin\n0.0000\n\n\nHAMBI_1977\nControl\nStreptomycin\n0.1362\n\n\nHAMBI_1977\nStreptomycin\nControl\n0.0000\n\n\nHAMBI_1977\nStreptomycin\nStreptomycin\n0.1522\n\n\nHAMBI_2443\nAncestor\nControl\n0.0000\n\n\nHAMBI_2659\nControl\nControl\n0.0069\n\n\nHAMBI_2659\nControl\nStreptomycin\n0.3215\n\n\nHAMBI_2659\nStreptomycin\nControl\n0.3353\n\n\nHAMBI_2659\nStreptomycin\nStreptomycin\n0.4376\n\n\n\n\n\n\n\n\n6.2.2) Enrichment of individual COG categories\n\n\nCode\npar2test &lt;- left_join(output_gene_table_filt, eggnog,\n                      by = join_by(locus_tag, strainID)) %&gt;%\n  filter(!is.na(COG_category)) %&gt;% \n  group_by(strainID, Home, Measure) %&gt;% \n  count(COG_category_single, name = \"n_cog_par\") %&gt;% \n  mutate(n_par = sum(n_cog_par))\n\nback2test &lt;- eggnog %&gt;% \n  filter(!is.na(COG_category)) %&gt;% \n  group_by(strainID) %&gt;% \n  count(COG_category_single, name = \"n_cog_background\") %&gt;% \n  mutate(n_background = sum(n_cog_background))\n\nphypres &lt;- left_join(par2test, back2test, by = join_by(strainID, COG_category_single)) %&gt;% \n  mutate(p_enrich = enricher(n_background, n_par, n_cog_background, n_cog_par, over=TRUE),\n         p_deplete = enricher(n_background, n_par, n_cog_background, n_cog_par, over=FALSE)) %&gt;% \n  mutate(p_enrich_adj = p.adjust(p_enrich, method = \"fdr\"),\n         p_deplete_adj = p.adjust(p_deplete, method = \"fdr\")) \n\n\nqenrich &lt;- qvalue_truncp(phypres$p_enrich)\nqdeplete &lt;- qvalue_truncp(phypres$p_deplete)\n\nphypres$q_enrich &lt;- qenrich$qvalues\nphypres$q_deplete &lt;- qdeplete$qvalues\n\n\n\n6.2.2.1) Hypergeometric Test Table\nTesting enrichment in individual COG categories in individual species using hpergeometric test. Calculating q-values to correct for multiple testings.\n\n\nCode\nx &lt;- phypres %&gt;% \n  relocate(p_enrich, q_enrich, p_enrich_adj) %&gt;% \n  arrange(p_enrich)\n\nrmarkdown::paged_table(x)\n\n\n\n\n  \n\n\n\n\n\nCode\nx &lt;- left_join(COGs_distribution_simulated, COGs_distribution_observed,\n          by = join_by(COG_category_single, strainID, Home, Measure)) %&gt;% \n  drop_na() %&gt;% \n  mutate(gt = if_else(nsim &gt;= nobs, 1, 0)) %&gt;% \n  group_by(COG_category_single, strainID, Home, Measure) %&gt;% \n  summarize(p = sum(gt)/n()) %&gt;% \n  arrange(p) %&gt;% \n  mutate(p_adj = p.adjust(p, method = \"fdr\"))\n\n\n\n\n6.2.2.2) Nonparametric Simulation Table\nCounting the number of random samplings that have a COG count greater/less than that the observed COG count\n\n\nCode\nrmarkdown::paged_table(x)\n\n\n\n\n  \n\n\n\n\n\n\n6.2.3) COG Distribution Plots\n\n\nCode\ncog_pmut &lt;- left_join(output_gene_table_filt, eggnog,\n                      by = join_by(locus_tag, strainID)) %&gt;% \n  count(COG_category_single) %&gt;% \n  mutate(f = n/sum(n),\n         n = n*1000,\n         type = \"parallel_mutations\") \n\ncog_everything &lt;- eggnog %&gt;% \n  count(COG_category_single) %&gt;% \n  mutate(f = n/sum(n), \n         type = \"all_genes\") \n\npcogs &lt;- bind_rows(cog_pmut, cog_everything) %&gt;% \n  drop_na() %&gt;% \n  ggplot() +\n  geom_bar(aes(x = fct_reorder(COG_category_single, f, .desc = F), y=n, fill = type), stat=\"identity\",\n           position = position_dodge( preserve = \"total\")) +\n  scale_fill_brewer(palette = \"Set1\") +\n  labs(x = \"COG Category\", y = \"Fraction genes in COG category\", fill = \"Subset\") +\n  scale_y_continuous(\n    \"N all genes\", \n    sec.axis = sec_axis(~ . * 1/1000, name = \"N parallel genes\")\n  ) +\n  theme_bw() + \n  theme(\n    panel.grid = element_blank(),\n    panel.background = element_blank(),\n    legend.position = \"bottom\"\n  )\n\n\n\n6.2.3.1) All data\nFraction of genes in each COG category for genes with a COG annotation (red bars) and only genes exhibiting significant genomic parallelism (blue bars) for all HAMBIs with high enough coverage.\n\n\nCode\npcogs\n\n\n\n\n\n\n\n6.2.3.2) Plot split by HAMBI (6 most common)\nFraction of genes in each COG category for genes with a COG annotation (red bars) and only genes exhibiting significant genomic parallelism (blue bars). Significantly enriched in parallel mutations in table below.\n\n\nCode\n# species detected in the metagenomes\nmgsp &lt;- c(\"HAMBI_2659\", \"HAMBI_1972\", \"HAMBI_1977\", \"HAMBI_1287\", \"HAMBI_0006\", \"HAMBI_1842\")\n\ncog_pmut_mgsp &lt;- left_join(output_gene_table_filt, eggnog,\n                      by = join_by(locus_tag, strainID)) %&gt;% \n  filter(strainID %in% mgsp) %&gt;% \n  group_by(strainID, Home, Measure) %&gt;% \n  count(COG_category_single, name = \"tot\") %&gt;% \n  # scaling factor to make ploting on 2 axes possible\n  mutate(n = tot*250,\n         f = n/sum(n),\n         type = \"parallel_mutations\") \n\ncog_everything_mgsp &lt;- eggnog %&gt;% \n  filter(strainID %in% mgsp) %&gt;% \n  group_by(strainID) %&gt;% \n  count(COG_category_single) %&gt;% \n  mutate(f = n/sum(n),\n         type = \"all_genes\") %&gt;% \n  expand_grid(Home = c(\"Ancestor\", \"Control\", \"Streptomycin\"), Measure = c(\"Control\", \"Streptomycin\"))\n\npcogs_mgsp &lt;- semi_join(cog_everything_mgsp, cog_pmut_mgsp,\n          by = join_by(strainID, Home, Measure)) %&gt;% \n  bind_rows(cog_pmut_mgsp) %&gt;% \n  filter(!is.na(COG_category_single)) %&gt;% \n  mutate(treat = paste0(\"Home:\", Home, \" | Measure:\", Measure)) %&gt;% \n  ggplot() +\n  geom_bar(aes(x = fct_reorder(COG_category_single, n, .desc = F), y=n, fill = type), stat=\"identity\",\n           position = position_dodge( preserve = \"total\")) +\n  scale_fill_brewer(palette = \"Set1\") +\n  # geom_point(data = tibble(x = c(\"U\", \"P\", \"D\", \"D\", \"P\", \"M\"),\n  #                          y = c(900, 900, 900, 900, 900, 900),\n  #                          strainID = c(\"HAMBI_2659\", \"HAMBI_2659\", \"HAMBI_1972\", \"HAMBI_1972\", \"HAMBI_2659\" ,\"HAMBI_1972\"),\n  #                          prey_history = c(\"evo\", \"evo\", \"evo\", \"evo\", \"evo\", \"evo\"),\n  #                          predator_history = c(\"evo\", \"evo\", \"anc\", \"evo\", \"anc\", \"evo\")),\n  #            aes(x = x, y = y), shape = 8) +\n  facet_grid(treat ~ strainID) +\n  labs(x = \"COG Category\", y = \"Fraction genes in COG category\", fill = \"Subset\") +\n  scale_y_continuous(\n    \"N all genes\", \n    sec.axis = sec_axis(~ . * 1/250, name = \"N parallel genes\")\n  ) +\n  theme_bw() + \n  theme(\n    panel.grid = element_blank(),\n    strip.background = element_blank(),\n    panel.background = element_blank(),\n    legend.position = \"bottom\"\n  )\n\n\npcogs_mgsp\n\n\n\n\n\n\n\n6.2.3.3) Significant in the plot (q_enrich &lt; 0.1)\n\n\nCode\nx &lt;- phypres %&gt;%\n  select(strainID, Home, Measure,COG_category_single, q_enrich) %&gt;%\n  filter(q_enrich &lt; 0.1) %&gt;% \n  left_join(cog_description) %&gt;%\n  select(-COG_category_single) %&gt;%\n  arrange(q_enrich)\n\nknitr::kable(x)\n\n\n\n\n\nstrainID\nHome\nMeasure\nq_enrich\nCOG_category_long\n\n\n\n\nHAMBI_1972\nControl\nControl\n0.0000300\nN - Cell motility\n\n\nHAMBI_1972\nAncestor\nControl\n0.0102536\nN - Cell motility\n\n\nHAMBI_1972\nStreptomycin\nControl\n0.0102536\nN - Cell motility\n\n\nHAMBI_0403\nAncestor\nStreptomycin\n0.0728755\nK – Transcription"
  }
]